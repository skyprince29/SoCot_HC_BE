// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoCot_HC_BE.Data;

#nullable disable

namespace SoCot_HC_BE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250625054928_Add person id in referral")]
    partial class Addpersonidinreferral
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SoCot_HC_BE.Model.ActivityLog", b =>
                {
                    b.Property<Guid>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BarangayId")
                        .HasColumnType("int");

                    b.Property<string>("BlockNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HouseNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LotNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Purok")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sitio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TempId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Barangay", b =>
                {
                    b.Property<int>("BarangayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarangayId"));

                    b.Property<string>("BarangayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.HasKey("BarangayId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Barangay");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecord", b =>
                {
                    b.Property<Guid>("DentalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConsentedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DentalRecordDetailsMedicalHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DentalRecordDetailsOralHealthConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DentalRecordDetailsPresenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DentalRecordDetailsSocialHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DentalRecordDetailsToothCountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PatientDepartmentTransactionReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientRegistryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhysicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferralNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DentalRecordId");

                    b.HasIndex("DentalRecordDetailsMedicalHistoryId");

                    b.HasIndex("DentalRecordDetailsOralHealthConditionId");

                    b.HasIndex("DentalRecordDetailsPresenceId");

                    b.HasIndex("DentalRecordDetailsSocialHistoryId");

                    b.HasIndex("DentalRecordDetailsToothCountId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("DentalRecord");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsFindings", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsFindingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("DateDiagnose")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DentalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ToothNo")
                        .HasColumnType("int");

                    b.HasKey("DentalRecordDetailsFindingsId");

                    b.HasIndex("DentalRecordId");

                    b.ToTable("DentalRecordDetailsFindings");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsMedicalHistory", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsMedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alergies")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BloodTransfusionMonth")
                        .HasColumnType("int");

                    b.Property<int?>("BloodTransfusionYear")
                        .HasColumnType("int");

                    b.Property<bool>("HasAlergies")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBloodDisorders")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBloodTransfusion")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCardiovascularOrHeartDiseases")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDiabetesMelitus")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHepatitis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPrevHospitalization")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHypertentionOrCVA")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMalignancy")
                        .HasColumnType("bit");

                    b.Property<bool>("HasOthers")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTattoo")
                        .HasColumnType("bit");

                    b.Property<bool>("HasThyroidDisorders")
                        .HasColumnType("bit");

                    b.Property<string>("HepatitisType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MalignancyType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Medical")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Others")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Surgical")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DentalRecordDetailsMedicalHistoryId");

                    b.ToTable("DentalRecordDetailsMedicalHistory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsOralHealthCondition", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsOralHealthConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AbnormalGrowth")
                        .HasColumnType("bit");

                    b.Property<bool>("Calculus")
                        .HasColumnType("bit");

                    b.Property<bool>("CleftLipOrPalate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateOfOralExamination")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Debris")
                        .HasColumnType("bit");

                    b.Property<bool>("DentalCarries")
                        .HasColumnType("bit");

                    b.Property<bool>("Gingivitis")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfDecayedTeethBigD")
                        .HasColumnType("int");

                    b.Property<int>("NoOfDecayedTeethSmallD")
                        .HasColumnType("int");

                    b.Property<int>("NoOfFilledTeethBigF")
                        .HasColumnType("int");

                    b.Property<int>("NoOfFilledTeethSmallF")
                        .HasColumnType("int");

                    b.Property<int>("NoOfMissingTeethM")
                        .HasColumnType("int");

                    b.Property<int>("NoPermSoundTeeth")
                        .HasColumnType("int");

                    b.Property<int>("NoPermTeethPresent")
                        .HasColumnType("int");

                    b.Property<int>("NoTempSoundTeeth")
                        .HasColumnType("int");

                    b.Property<int>("NoTempTeethPresent")
                        .HasColumnType("int");

                    b.Property<bool>("OrallyFitChild")
                        .HasColumnType("bit");

                    b.Property<string>("Others")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("PeriodontalDisease")
                        .HasColumnType("bit");

                    b.Property<int>("TotalDFTeeth")
                        .HasColumnType("int");

                    b.Property<int>("TotalDMFTeeth")
                        .HasColumnType("int");

                    b.HasKey("DentalRecordDetailsOralHealthConditionId");

                    b.ToTable("DentalRecordDetailsOralHealthCondition");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsPresence", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsPresenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeLastBirthday")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfExamination")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PresenceOfCalculus")
                        .HasColumnType("bit");

                    b.Property<bool>("PresenceOfDentalCarries")
                        .HasColumnType("bit");

                    b.Property<bool>("PresenceOfDentoFacialAnomaly")
                        .HasColumnType("bit");

                    b.Property<bool>("PresenceOfGingivitis")
                        .HasColumnType("bit");

                    b.Property<bool>("PresenceOfNeoplasm")
                        .HasColumnType("bit");

                    b.Property<bool>("PresenceOfOralDebris")
                        .HasColumnType("bit");

                    b.Property<bool>("PresenceOfPeriodicPocket")
                        .HasColumnType("bit");

                    b.HasKey("DentalRecordDetailsPresenceId");

                    b.ToTable("DentalRecordDetailsPresence");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsServices", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsServicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDiagnose")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DentalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ServiceRendered")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ToothNo")
                        .HasColumnType("int");

                    b.HasKey("DentalRecordDetailsServicesId");

                    b.HasIndex("DentalRecordId");

                    b.ToTable("DentalRecordDetailsServices");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsSocialHistory", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsSocialHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BetelNutChewing")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("HasBetelNutChewing")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSweetenedSugarBeverageOrFood")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUseOfAlcohol")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUseOfTobacco")
                        .HasColumnType("bit");

                    b.Property<string>("SweetenedSugarBeverageOrFood")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UseOfAlcohol")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UseOfTobacco")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DentalRecordDetailsSocialHistoryId");

                    b.ToTable("DentalRecordDetailsSocialHistory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsToothCount", b =>
                {
                    b.Property<Guid>("DentalRecordDetailsToothCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CarriesIndicatedForExtractionPerm")
                        .HasColumnType("int");

                    b.Property<int>("CarriesIndicatedForExtractionTemp")
                        .HasColumnType("int");

                    b.Property<int>("CarriesIndicatedForFillingPerm")
                        .HasColumnType("int");

                    b.Property<int>("CarriesIndicatedForFillingTemp")
                        .HasColumnType("int");

                    b.Property<string>("Examiner")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FilledOrRestoredPerm")
                        .HasColumnType("int");

                    b.Property<int>("FilledOrRestoredTemp")
                        .HasColumnType("int");

                    b.Property<string>("FluorideApplication")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MissingDueToCarries")
                        .HasColumnType("int");

                    b.Property<int>("NoOfTeethPresentPerm")
                        .HasColumnType("int");

                    b.Property<int>("NoOfTeethPresentTemp")
                        .HasColumnType("int");

                    b.Property<int>("RootFragmentPerm")
                        .HasColumnType("int");

                    b.Property<int>("RootFragmentTemp")
                        .HasColumnType("int");

                    b.Property<int>("TotalDfAndDmfTeeth")
                        .HasColumnType("int");

                    b.HasKey("DentalRecordDetailsToothCountId");

                    b.ToTable("DentalRecordDetailsToothCount");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalTreatment", b =>
                {
                    b.Property<Guid>("DentalTreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePreferred")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientRegistryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QueueNo")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("acceptedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DentalTreatmentId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientRegistryId");

                    b.ToTable("DentalTreatment");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReferable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DepartmentDepartmentType", b =>
                {
                    b.Property<Guid>("DepartmentDepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentDepartmentTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("DepartmentDepartmentType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DepartmentType", b =>
                {
                    b.Property<Guid>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentTypeId");

                    b.ToTable("DepartmentType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Designation", b =>
                {
                    b.Property<Guid>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("tempId")
                        .HasColumnType("int");

                    b.HasKey("DesignationId");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AccreditationNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FacilityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("FacilityLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("Sector")
                        .HasColumnType("tinyint");

                    b.Property<string>("TINNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.HasIndex("AddressId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FamilyNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("PersonId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.FamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Asthma")
                        .HasColumnType("bit");

                    b.Property<bool>("Cancer")
                        .HasColumnType("bit");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("HeartAttack")
                        .HasColumnType("bit");

                    b.Property<bool>("Hypertension")
                        .HasColumnType("bit");

                    b.Property<bool>("KidneyDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("Stroke")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FamilyHistory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.FamilyMember", b =>
                {
                    b.Property<Guid>("FamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyMemberId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PersonId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Form", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FormId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Household", b =>
                {
                    b.Property<Guid>("HouseholdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HouseholdNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonIdHeadOfHousehold")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResidenceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TempHouseholdId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HouseholdId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonIdHeadOfHousehold");

                    b.ToTable("Households");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrengthId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StrengthNo")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.HasIndex("FormId");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RouteId");

                    b.HasIndex("StrengthId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ItemCategory", b =>
                {
                    b.Property<Guid>("ItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ItemCategoryId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ModuleStatusFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<byte>("NextStatusId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RequiredStatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("NextStatusId");

                    b.HasIndex("RequiredStatusId");

                    b.ToTable("ModuleStatusFlow");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Municipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("MunicipalityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.NonCommunicableDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlcoholIntake")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AnginaHeart")
                        .HasColumnType("bit");

                    b.Property<string>("AverageBP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExcessiveAlcoholIntake")
                        .HasColumnType("bit");

                    b.Property<int>("FBS_RBS")
                        .HasColumnType("int");

                    b.Property<Guid?>("FamilyHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FirstVitalSignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Fruits")
                        .HasColumnType("bit");

                    b.Property<bool>("Glucose")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GlucoseDateTaken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HighFatSalt")
                        .HasColumnType("bit");

                    b.Property<int>("Ketones")
                        .HasColumnType("int");

                    b.Property<DateTime?>("KetonesDateTaken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Lipids")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LipidsDateTaken")
                        .HasColumnType("datetime2");

                    b.Property<string>("NCDQ1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCDQ8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PhysicalActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("Polydipsia")
                        .HasColumnType("bit");

                    b.Property<bool>("Polyphagia")
                        .HasColumnType("bit");

                    b.Property<bool>("Polyuria")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SecondVitalSignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Smoking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCholesterol")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UrineProtein")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UrineProteinDateTaken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Vegetable")
                        .HasColumnType("bit");

                    b.Property<int>("Waist")
                        .HasColumnType("int");

                    b.Property<bool>("hasStrokeTIA")
                        .HasColumnType("bit");

                    b.Property<string>("riskLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("withDiabetes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("withKetones")
                        .HasColumnType("bit");

                    b.Property<bool>("withProtein")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FamilyHistoryId");

                    b.HasIndex("FirstVitalSignId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SecondVitalSignId");

                    b.ToTable("NonCommunicableDisease");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PatientDepartmentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ForwardedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FromDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientRegistryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientRegistryId");

                    b.HasIndex("StatusId");

                    b.ToTable("PatientDepartmentTransaction");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PatientRegistry", b =>
                {
                    b.Property<Guid>("PatientRegistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemporaryPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientRegistryCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("PatientRegistryType")
                        .HasColumnType("int");

                    b.Property<string>("ReferralNo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientRegistryId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.ToTable("PatientRegistry");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressIdPermanent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressIdResidential")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Citizenship")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CivilStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Completename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeceased")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientIdTemp")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId");

                    b.HasIndex("AddressIdPermanent");

                    b.HasIndex("AddressIdResidential");

                    b.ToTable("Person", t =>
                        {
                            t.HasTrigger("trg_UpdateFullNames");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PersonRelation", b =>
                {
                    b.Property<Guid>("PersonRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonIdRelated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonIdSelf")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PersonRelationId");

                    b.HasIndex("PersonIdRelated");

                    b.HasIndex("PersonIdSelf");

                    b.ToTable("PersonRelation");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Personnel", b =>
                {
                    b.Property<Guid>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonnelId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PersonId");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Referral", b =>
                {
                    b.Property<Guid>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttendingPhysicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Complains")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DischargeInstructions")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ReferralDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferralNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReferredFrom")
                        .HasColumnType("int");

                    b.Property<int>("ReferredTo")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<long?>("TempRefId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReferralId");

                    b.HasIndex("AttendingPhysicianId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("ReferredFrom");

                    b.HasIndex("ReferredTo");

                    b.HasIndex("StatusId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ReferralService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReferralId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReferralService");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Route", b =>
                {
                    b.Property<Guid>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RouteId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.SchoolAgeProfile", b =>
                {
                    b.Property<Guid>("SchoolAgeProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationalLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInSchool")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolAgeProfileId");

                    b.HasIndex("PersonId");

                    b.ToTable("SchoolAgeProfile");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("ServiceClassificationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ServiceCategory", b =>
                {
                    b.Property<Guid>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceCategoryId");

                    b.HasIndex("FacilityId");

                    b.ToTable("ServiceCategory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ServiceClassification", b =>
                {
                    b.Property<int>("ServiceClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceClassificationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceClassificationId");

                    b.ToTable("ServiceClassification");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ServiceDepartment", b =>
                {
                    b.Property<Guid>("ServiceDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDepartment");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Strength", b =>
                {
                    b.Property<Guid>("StrengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StrengthId");

                    b.ToTable("Strength");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.SubCategory", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.SupplyStorage", b =>
                {
                    b.Property<Guid>("SupplyStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SupplyStorageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplyStorageId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacilityId");

                    b.ToTable("SupplyStorage");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.TransactionFlowHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CurrentStatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<byte?>("PreviousStatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PreviousStatusId");

                    b.ToTable("TransactionFlowHistory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UoM", b =>
                {
                    b.Property<Guid>("UoMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UoMId");

                    b.ToTable("UoM");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsinitLogin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RememberMeToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UserIdTemp")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserAccountId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UserDepartment", b =>
                {
                    b.Property<Guid>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserDepartment");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserGroupId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.VitalSign", b =>
                {
                    b.Property<Guid>("VitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CardiacRate")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diastolic")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<int>("Systolic")
                        .HasColumnType("int");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("VitalSignId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.VitalSignReference", b =>
                {
                    b.Property<Guid>("VitalSignReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VitalSignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VitalSignReferenceType")
                        .HasColumnType("int");

                    b.HasKey("VitalSignReferenceId");

                    b.ToTable("VitalSignReference");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.WRA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FPMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FPType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fecundity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForCounseling")
                        .HasColumnType("bit");

                    b.Property<bool>("HavePartner")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShiftToModernMethod")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UsingAnyFPMethod")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WraDateOfAssessment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WraDateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WraPlanToHaveMoreChildren")
                        .HasColumnType("bit");

                    b.Property<string>("WraPlanToHveMoreChildrenDecision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("WRA");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.WoundType", b =>
                {
                    b.Property<int>("WoundTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundTypeId"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WoundTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WoundTypeId");

                    b.ToTable("WoundType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ActivityLog", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Address", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Barangay", "Barangay")
                        .WithMany("Addresses")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Municipality", "Municipality")
                        .WithMany("Addresses")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barangay");

                    b.Navigation("Municipality");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Barangay", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Municipality", "Municipality")
                        .WithMany("Barangays")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecord", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.DentalRecordDetailsMedicalHistory", "DentalRecordDetailsMedicalHistory")
                        .WithMany()
                        .HasForeignKey("DentalRecordDetailsMedicalHistoryId");

                    b.HasOne("SoCot_HC_BE.Model.DentalRecordDetailsOralHealthCondition", "DentalRecordDetailsOralHealthCondition")
                        .WithMany()
                        .HasForeignKey("DentalRecordDetailsOralHealthConditionId");

                    b.HasOne("SoCot_HC_BE.Model.DentalRecordDetailsPresence", "DentalRecordDetailsPresence")
                        .WithMany()
                        .HasForeignKey("DentalRecordDetailsPresenceId");

                    b.HasOne("SoCot_HC_BE.Model.DentalRecordDetailsSocialHistory", "DentalRecordDetailsSocialHistory")
                        .WithMany()
                        .HasForeignKey("DentalRecordDetailsSocialHistoryId");

                    b.HasOne("SoCot_HC_BE.Model.DentalRecordDetailsToothCount", "DentalRecordDetailsToothCount")
                        .WithMany()
                        .HasForeignKey("DentalRecordDetailsToothCountId");

                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("SoCot_HC_BE.Model.Person", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("SoCot_HC_BE.Model.Person", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId");

                    b.Navigation("DentalRecordDetailsMedicalHistory");

                    b.Navigation("DentalRecordDetailsOralHealthCondition");

                    b.Navigation("DentalRecordDetailsPresence");

                    b.Navigation("DentalRecordDetailsSocialHistory");

                    b.Navigation("DentalRecordDetailsToothCount");

                    b.Navigation("Facility");

                    b.Navigation("Patient");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsFindings", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.DentalRecord", null)
                        .WithMany("DentalRecordDetailsFindings")
                        .HasForeignKey("DentalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecordDetailsServices", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.DentalRecord", null)
                        .WithMany("DentalRecordDetailsServices")
                        .HasForeignKey("DentalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalTreatment", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.PatientRegistry", "PatientRegistry")
                        .WithMany()
                        .HasForeignKey("PatientRegistryId");

                    b.Navigation("Facility");

                    b.Navigation("Patient");

                    b.Navigation("PatientRegistry");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Department", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("Facility");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DepartmentDepartmentType", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Department", "Department")
                        .WithMany("DepartmentTypes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("DepartmentType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Facility", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Family", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Household", "Household")
                        .WithMany("Families")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany("Families")
                        .HasForeignKey("PersonId");

                    b.Navigation("Household");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.FamilyMember", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Family", "Family")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany("FamilyMemberships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Household", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Address", "Address")
                        .WithMany("Households")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsHeadOfHousehold")
                        .WithMany("Households")
                        .HasForeignKey("PersonIdHeadOfHousehold");

                    b.Navigation("Address");

                    b.Navigation("PersonAsHeadOfHousehold");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Item", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId");

                    b.HasOne("SoCot_HC_BE.Model.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.HasOne("SoCot_HC_BE.Model.Strength", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthId");

                    b.HasOne("SoCot_HC_BE.Model.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Form");

                    b.Navigation("ItemCategory");

                    b.Navigation("Product");

                    b.Navigation("Route");

                    b.Navigation("Strength");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ModuleStatusFlow", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Status", "NextStatus")
                        .WithMany()
                        .HasForeignKey("NextStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Status", "RequiredStatus")
                        .WithMany()
                        .HasForeignKey("RequiredStatusId");

                    b.Navigation("Module");

                    b.Navigation("NextStatus");

                    b.Navigation("RequiredStatus");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Municipality", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Province", "Province")
                        .WithMany("Municipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.NonCommunicableDisease", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.FamilyHistory", "FamilyHistory")
                        .WithMany()
                        .HasForeignKey("FamilyHistoryId");

                    b.HasOne("SoCot_HC_BE.Model.VitalSign", "FirstVitalSign")
                        .WithMany()
                        .HasForeignKey("FirstVitalSignId");

                    b.HasOne("SoCot_HC_BE.Model.Person", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("SoCot_HC_BE.Model.VitalSign", "SecondVitalSign")
                        .WithMany()
                        .HasForeignKey("SecondVitalSignId");

                    b.Navigation("FamilyHistory");

                    b.Navigation("FirstVitalSign");

                    b.Navigation("Patient");

                    b.Navigation("SecondVitalSign");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PatientDepartmentTransaction", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.PatientRegistry", "PatientRegistry")
                        .WithMany()
                        .HasForeignKey("PatientRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientRegistry");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PatientRegistry", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("SoCot_HC_BE.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Service");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Person", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Address", "AddressAsPermanent")
                        .WithMany("PersonsWithPermanentAddress")
                        .HasForeignKey("AddressIdPermanent");

                    b.HasOne("SoCot_HC_BE.Model.Address", "AddressAsResidential")
                        .WithMany("PersonsWithResidentialAddress")
                        .HasForeignKey("AddressIdResidential");

                    b.Navigation("AddressAsPermanent");

                    b.Navigation("AddressAsResidential");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PersonRelation", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsRelated")
                        .WithMany("PersonRelationsAsRelated")
                        .HasForeignKey("PersonIdRelated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsSelf")
                        .WithMany("PersonRelationsAsSelf")
                        .HasForeignKey("PersonIdSelf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonAsRelated");

                    b.Navigation("PersonAsSelf");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Personnel", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("Facility");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Referral", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Personnel", "AttendingPhysician")
                        .WithMany()
                        .HasForeignKey("AttendingPhysicianId");

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("SoCot_HC_BE.Model.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId");

                    b.HasOne("SoCot_HC_BE.Model.Facility", "FacilityReferredFrom")
                        .WithMany()
                        .HasForeignKey("ReferredFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Facility", "FacilityReferredTo")
                        .WithMany()
                        .HasForeignKey("ReferredTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendingPhysician");

                    b.Navigation("FacilityReferredFrom");

                    b.Navigation("FacilityReferredTo");

                    b.Navigation("Person");

                    b.Navigation("Personnel");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ReferralService", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Referral", "Referral")
                        .WithMany("ReferralServices")
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referral");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.SchoolAgeProfile", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Service", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.ServiceClassification", "ServiceClassification")
                        .WithMany()
                        .HasForeignKey("ServiceClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Facility");

                    b.Navigation("ServiceCategory");

                    b.Navigation("ServiceClassification");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ServiceCategory", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ServiceDepartment", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Service", "Service")
                        .WithMany("ServiceDepartments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.SupplyStorage", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.TransactionFlowHistory", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Status", "CurrentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Status", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusId");

                    b.Navigation("CurrentStatus");

                    b.Navigation("Module");

                    b.Navigation("PreviousStatus");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UserAccount", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Facility", "FacilityAsUserAccount")
                        .WithMany("UserAccountsAsFacility")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsUserAccount")
                        .WithMany("UserAccountsAsPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.UserGroup", "UserGroupAsUserAccount")
                        .WithMany("UserAccountsAsUserGroup")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("FacilityAsUserAccount");

                    b.Navigation("PersonAsUserAccount");

                    b.Navigation("UserGroupAsUserAccount");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UserDepartment", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SoCot_HC_BE.Model.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Department");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.WRA", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Address", b =>
                {
                    b.Navigation("Households");

                    b.Navigation("PersonsWithPermanentAddress");

                    b.Navigation("PersonsWithResidentialAddress");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Barangay", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DentalRecord", b =>
                {
                    b.Navigation("DentalRecordDetailsFindings");

                    b.Navigation("DentalRecordDetailsServices");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Department", b =>
                {
                    b.Navigation("DepartmentTypes");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Facility", b =>
                {
                    b.Navigation("UserAccountsAsFacility");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Family", b =>
                {
                    b.Navigation("FamilyMembers");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Household", b =>
                {
                    b.Navigation("Families");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Municipality", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Barangays");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Person", b =>
                {
                    b.Navigation("Families");

                    b.Navigation("FamilyMemberships");

                    b.Navigation("Households");

                    b.Navigation("PersonRelationsAsRelated");

                    b.Navigation("PersonRelationsAsSelf");

                    b.Navigation("UserAccountsAsPerson");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Referral", b =>
                {
                    b.Navigation("ReferralServices");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Service", b =>
                {
                    b.Navigation("ServiceDepartments");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.UserGroup", b =>
                {
                    b.Navigation("UserAccountsAsUserGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
