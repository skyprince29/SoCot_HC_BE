// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoCot_HC_BE.Data;

#nullable disable

namespace SoCot_HC_BE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428000927_addFamilyNo")]
    partial class addFamilyNo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SoCot_HC_BE.Model.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BarangayId")
                        .HasColumnType("int");

                    b.Property<string>("BlockNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HouseNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LotNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Purok")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Sitio")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Street")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressId");

                    b.HasIndex("BarangayId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Barangay", b =>
                {
                    b.Property<int>("BarangayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarangayId"));

                    b.Property<string>("BarangayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.HasKey("BarangayId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Barangay");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReferable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DepartmentDepartmentType", b =>
                {
                    b.Property<Guid>("DepartmentDepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentDepartmentTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("DepartmentDepartmentType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DepartmentType", b =>
                {
                    b.Property<Guid>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentTypeId");

                    b.ToTable("DepartmentType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AccreditationNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FacilityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("FacilityLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("Sector")
                        .HasColumnType("tinyint");

                    b.Property<string>("TINNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.HasIndex("AddressId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FamilyNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("PersonId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.FamilyMember", b =>
                {
                    b.Property<Guid>("FamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyMemberId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PersonId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Household", b =>
                {
                    b.Property<Guid>("HouseholdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HouseholdNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonIdHeadOfHousehold")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResidenceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HouseholdId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonIdHeadOfHousehold");

                    b.ToTable("Households");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Municipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("MunicipalityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PHICMemberType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PatientIdTemp")
                        .HasColumnType("int");

                    b.Property<Guid?>("PersonIdFather")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonIdMother")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonIdPatient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonIdSpouse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhilHealthNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientId");

                    b.HasIndex("PersonIdFather");

                    b.HasIndex("PersonIdMother");

                    b.HasIndex("PersonIdPatient");

                    b.HasIndex("PersonIdSpouse");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PatientRegistry", b =>
                {
                    b.Property<Guid>("PatientRegistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsTemporaryPatient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientRegistryCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("PatientRegistryType")
                        .HasColumnType("int");

                    b.Property<string>("ReferralNo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientRegistryId");

                    b.HasIndex("FacilityId");

                    b.ToTable("PatientRegistry");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressIdPermanent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressIdResidential")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("Citizenship")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CivilStatus")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeceased")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Middlename")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PatientIdTemp")
                        .HasColumnType("int");

                    b.Property<int?>("Religion")
                        .HasColumnType("int");

                    b.Property<int?>("Suffix")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("AddressIdPermanent");

                    b.HasIndex("AddressIdResidential");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Personnel", b =>
                {
                    b.Property<Guid>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonnelId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PersonId");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Referral", b =>
                {
                    b.Property<Guid>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdmissionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArrivalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AttendingPhysicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Complains")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DischargeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeInstructions")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("FacilityReferredFromFacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityReferredToFacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ReferralDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferralNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReferredFrom")
                        .HasColumnType("int");

                    b.Property<int>("ReferredTo")
                        .HasColumnType("int");

                    b.Property<long>("ReferrenceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TempRefId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAlreadyUse")
                        .HasColumnType("bit");

                    b.HasKey("ReferralId");

                    b.HasIndex("AttendingPhysicianId");

                    b.HasIndex("FacilityReferredFromFacilityId");

                    b.HasIndex("FacilityReferredToFacilityId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ServiceClassificationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.ServiceClassification", b =>
                {
                    b.Property<int>("ServiceClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceClassificationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceClassificationId");

                    b.ToTable("ServiceClassification");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.VitalSign", b =>
                {
                    b.Property<Guid>("VitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CardiacRate")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diastolic")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<int>("Systolic")
                        .HasColumnType("int");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("VitalSignId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Address", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Barangay", "Barangay")
                        .WithMany("Addresses")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Municipality", "Municipality")
                        .WithMany("Addresses")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barangay");

                    b.Navigation("Municipality");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Barangay", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Municipality", "Municipality")
                        .WithMany("Barangays")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Department", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("Facility");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.DepartmentDepartmentType", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("DepartmentType");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Facility", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Family", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Household", "Household")
                        .WithMany("Families")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany("Families")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.FamilyMember", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Household", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Address", "Address")
                        .WithMany("Households")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsHeadOfHousehold")
                        .WithMany("Households")
                        .HasForeignKey("PersonIdHeadOfHousehold")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PersonAsHeadOfHousehold");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Municipality", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Province", "Province")
                        .WithMany("Municipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Patient", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsFather")
                        .WithMany("PatientsAsFather")
                        .HasForeignKey("PersonIdFather");

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsMother")
                        .WithMany("PatientsAsMother")
                        .HasForeignKey("PersonIdMother");

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsSelf")
                        .WithMany("PatientsAsSelf")
                        .HasForeignKey("PersonIdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "PersonAsSpouse")
                        .WithMany("PatientsAsSpouse")
                        .HasForeignKey("PersonIdSpouse");

                    b.Navigation("PersonAsFather");

                    b.Navigation("PersonAsMother");

                    b.Navigation("PersonAsSelf");

                    b.Navigation("PersonAsSpouse");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.PatientRegistry", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Person", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Address", "AddressAsPermanent")
                        .WithMany("PersonsWithPermanentAddress")
                        .HasForeignKey("AddressIdPermanent");

                    b.HasOne("SoCot_HC_BE.Model.Address", "AddressAsResidential")
                        .WithMany("PersonsWithResidentialAddress")
                        .HasForeignKey("AddressIdResidential");

                    b.Navigation("AddressAsPermanent");

                    b.Navigation("AddressAsResidential");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Personnel", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Referral", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Personnel", "AttendingPhysician")
                        .WithMany()
                        .HasForeignKey("AttendingPhysicianId");

                    b.HasOne("SoCot_HC_BE.Model.Facility", "FacilityReferredFrom")
                        .WithMany()
                        .HasForeignKey("FacilityReferredFromFacilityId");

                    b.HasOne("SoCot_HC_BE.Model.Facility", "FacilityReferredTo")
                        .WithMany()
                        .HasForeignKey("FacilityReferredToFacilityId");

                    b.HasOne("SoCot_HC_BE.Model.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId");

                    b.Navigation("AttendingPhysician");

                    b.Navigation("FacilityReferredFrom");

                    b.Navigation("FacilityReferredTo");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Service", b =>
                {
                    b.HasOne("SoCot_HC_BE.Model.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoCot_HC_BE.Model.ServiceClassification", "ServiceClassification")
                        .WithMany()
                        .HasForeignKey("ServiceClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("ServiceClassification");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Address", b =>
                {
                    b.Navigation("Households");

                    b.Navigation("PersonsWithPermanentAddress");

                    b.Navigation("PersonsWithResidentialAddress");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Barangay", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Household", b =>
                {
                    b.Navigation("Families");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Municipality", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Barangays");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Person", b =>
                {
                    b.Navigation("Families");

                    b.Navigation("Households");

                    b.Navigation("PatientsAsFather");

                    b.Navigation("PatientsAsMother");

                    b.Navigation("PatientsAsSelf");

                    b.Navigation("PatientsAsSpouse");
                });

            modelBuilder.Entity("SoCot_HC_BE.Model.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Municipalities");
                });
#pragma warning restore 612, 618
        }
    }
}
